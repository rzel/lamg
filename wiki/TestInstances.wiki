#summary Downloading and installation the LAMG graph collection. Running LAMG in batch mode over all graphs.
#labels graphConvert9046800Infuf

= Downloading and Installing =

LAMG comes with an extensive testing collection of over 1700 real-world graph instances with up to about 10 million edges, collected from the following sources:
  * The [http://www.cise.ufl.edu/research/sparse/matrices/ University of Florida Sparse Matrix collection (UF)] by Tim Davis.
  * [http://staffweb.cms.gre.ac.uk/~wc06/partition/ C. Walshaw's] graph partitioning archive.
  * I. Safro's [http://www.mcs.anl.gov/~safro/mloga.html MLogA results archive] at Argonne National Laboratory.
  * The FTP site of the [http://dimacs.rutgers.edu/Challenges/ DIMACS Implementation Challenges].
Each source except UF corresponds to a zip file in the [http://code.google.com/p/lamg/downloads/list Downloads] section that has been converted to the LAMG input format. The UF collection is obtained from the UF server via the `ufget` API.

  * *Step 1:* [http://code.google.com/p/lamg/wiki/Installation Download and install] the LAMG code.
  * *Step 2:* In your `config.txt` file, set a `mat_dir` appropriate for your system (linux uses slashes; windows uses backslashes in dir paths). This directory will contain all graph data.
  * *Step 3:* Download all Test-Instance archive files (ml.zip, walshaw.zip, ...) from the [http://code.google.com/p/lamg/downloads/list Downloads] section. Unzip the files into `mat_dir`.
  * *Step 4:* Download and convert the UF collection to LAMG format: at the MATLAB prompt, type
{{{
graphConvert(0, 6e6, {'uf'}, '');
}}}
This downloads all symmetric UF graph instances with 0 to 6 million edges into `mat_dir/uf`. The maximum number of edges should match the amount of RAM you have on your machine. If you had unlimited RAM, you could use `Inf` as the second argument of ```graphConvert```.

= Running LAMG in Batch Mode =
The `runCycleAcf` program runs LAMG on all or selected instances in the `mat_dir` data dir and computes performance statistics (mainly setup time, and asymptotic convergence factor and solve time for flat and adaptive energy corrections). Output is written to the directory `out_dir` declared in `config.txt`.

Run on all instances with 151 to 6 million edges and generate an HTML report under `out_dir/graph/today's date`:
{{{
[r,s,b] = runCycleAcf('minEdges', 151, 'maxEdges', 6e6, 'save', true, 'format', 'html');
}}}

You may append other LAMG options as key-value pairs to the arguments of `runCycleAcf`. See the `Options` class for a list of supported algorithm options.

= Emailing the Results =
To email the report generated by `runCycleAcf` on September 20, 2011, you may use the `sendmail` utility:
{{{
sendmail('user@yourdomain.com', 'LAMG Results', 'LAMG Log File', ...
   {'<YOUR out_dir>\graph\2011-09-20\cycle_results_log.txt'});
}}}

= Importing Your Graphs - Supported Input Formats =
The LAMG `graph` package contains APIs for reading and writing graphs from/to input files in a variety of formats:
{{{
GENERATED(0)            % Graph instance programmaticaly generated -- not read from an input source
MAT(1)                  % MATLAB mat file containing the metadata and graph adjacency matrix
UF(2)                   % University of Florida Sparse Matrix Collection
CHACO(3)                % Compressed row format
DIMACS(4)               % DIMACS challenge format
DOT(5)                  % dot graph plotting language
PLAIN(6)                % GraphViz plain text format
COMPRESSED_COLUMN(7)    % Compressed column format [i,j,aij]
}}}
Other formats can easily be added to this framework. If you have graphs that you would like to input to LAMG in one of the above formats, you can readily use the `graphConvert` utility to convert them to the standard LAMG input. This is a MAT format that is similar but not identical to the UF format.