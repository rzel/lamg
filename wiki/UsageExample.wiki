#summary Examples of running LAMG in MATLAB.

This example is in the m-file <code>examples/lamg_example.m</code> in the distribution. See other examples in this directory for SDD systems.
 
=Basic Example=
<a ref="#usage">
{{{
%=========================================================================
% lamg_example.m
%
% LAMG Example usage: solve a graph Laplacian system with a random
% compatible right-hand side.
%=========================================================================

fprintf('Setting up problem\n');
g = Graphs.grid('fd', [40 40], 'normalized', true);
A = g.laplacian;                % Zero row-sum (Neumann B.C.)
b = rand(size(A,1), 1);
b = b - mean(b);                % Make RHS compatible with A's null space
inputType = 'laplacian';        % The input matrix A is a graph Laplacian
solver = 'lamg';                % Or 'cmg', or 'direct'

%---------------------------------------------------------------------
% Setup phase: construct a LAMG multi-level hierarchy
%---------------------------------------------------------------------
fprintf('Setting up solver %s\n', solver);
lamg    = Solvers.newSolver(solver, 'randomSeed', 1);
tStart  = tic;
setup   = lamg.setup(inputType, A);
tSetup  = toc(tStart);

%---------------------------------------------------------------------
% Solve phase: set up a random compatible RHS b and solve A*x=b. You can
% repeat this phase for multiple b's without rerunning the setup phase.
%---------------------------------------------------------------------
setRandomSeed(now);
% Turn on debugging printouts during the run
core.logging.Logger.setLevel('lin.api.AcfComputer', core.logging.LogLevel.DEBUG);
fprintf('Solving A*x=b\n');
tStart = tic;
[x, ~, ~, details] = lamg.solve(setup, b, 'errorReductionTol', 1e-8);
tSolve = toc(tStart);
% Turn printouts off
core.logging.Logger.setLevel('lin.api.AcfComputer', core.logging.LogLevel.INFO);
fprintf('------------------------------------------------------------------------\n');

%---------------------------------------------------------------------
% Display statistics
%---------------------------------------------------------------------
disp(setup);
tMvm    = mvmTime(A, 5);
nnz     = numel(nonzeros(A));

fprintf('\n');
fprintf('MVM time [sec]       elapsed %.3f, per nonzero %.2e\n', ...
    tMvm, tMvm / nnz);
fprintf('Setup time [sec]     elapsed %.3f, per nonzero %.2e, in MVM %.2f\n', ...
    tSetup, tSetup / nnz, tSetup / tMvm);
fprintf('Solve time [sec]     elapsed %.3f, per nonzero %.2e, in MVM %.2f\n', ...
    tSolve, normalizedSolveTime(tSolve, details.errorNormHistory) / nnz, tSolve / tMvm);
fprintf('|A*x-b|/|b|          %.2e\n', norm(A*x-b)/norm(b));
if (isfield(details, 'acf'))
    fprintf('Convergence factor   %.3f\n', details.acf);
end
}}}

Output (when debugging is turned on):
{{{
Setting up problem
Setting up solver lamg
Solving A*x=b
------------------------------------------------------------------------
Multi-level setup
	#levels          = 5
	Design gamma     = 1.5
	Edge  complexity = 2.866
	Cycle complexity = 5.405
l  Type     Nodes    Edges    NodeR  EdgeR   DegL1   Nu  Gam  Work  TV 
=======================================================================
1  FINEST   1600     3120     1.000  1.000  3.90    0   1.0  0.00  0  
2  ELIM     798      3038     0.499  0.974  7.61    3   1.5  3.42  4  
3  AGG      358      1201     0.449  0.395  6.71    0   1.0  0.19  0  
4  ELIM     327      1141     0.913  0.950  6.98    3   1.5  1.67  5  
5  AGG      146      442      0.446  0.387  6.05    0   0.0  0.12  0  

MVM time [sec]       elapsed 0.000, per nonzero 4.23e-009
Setup time [sec]     elapsed 0.095, per nonzero 1.22e-005, in MVM 2878.14
Solve time [sec]     elapsed 0.071, per nonzero 1.08e-006, in MVM 2136.91
|A*x-b|/|b|          1.03e-008
Convergence factor   0.158
}}}

=Customizing the Algorithm=
LAMG is supposed to be a black-box solver, so in most cases you don't need to tweak any options!

If you do need to, all options are attributes of the class `amg.api.Options` and described therein. You can pass key-value pairs at the end of the `newSolver('lamg')`, `setup()` and solve()` calls. Examples:
{{{
% Measure convergence in the residual L2 norm.
% Options passed to the constructor are used by both the setup and solve phases.
lamg    = Solvers.newSolver('lamg', 'errorNorm', @errorNormResidual);

% Stop coarsening when the graph has less than 200 edges
setup = lamg.setup(A, 'maxDirectSolverSize', 200);

% Solve A*x=b to 8 significant figures
[x, details] = lamg.linearSolve(setup, b, 'errorReductionTol', 1e-8);